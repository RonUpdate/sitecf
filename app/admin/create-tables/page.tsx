"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { getSupabaseClient } from "@/lib/supabase-client"
import Link from "next/link"
import { Loader2 } from "lucide-react"
// –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç generateMetadata –∏–ª–∏ Metadata, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

export default function CreateTablesPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const [log, setLog] = useState<string[]>([])
  const supabase = getSupabaseClient()

  const createTables = async () => {
    setLoading(true)
    setError(null)
    setSuccess(false)
    setLog(["–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü..."])

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      setLog((prev) => [...prev, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories..."])
      const { error: categoriesError } = await supabase.rpc("exec_sql", {
        sql_query: `
          CREATE TABLE IF NOT EXISTS categories (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            name TEXT NOT NULL,
            description TEXT,
            image_url TEXT,
            slug TEXT UNIQUE NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        `,
      })

      if (categoriesError) {
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è exec_sql –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –Ω–∞–ø—Ä—è–º—É—é
        if (categoriesError.message.includes("exec_sql")) {
          setLog((prev) => [...prev, "–§—É–Ω–∫—Ü–∏—è exec_sql –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü..."])
          setLog((prev) => [...prev, "‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é"])
          throw new Error("–§—É–Ω–∫—Ü–∏—è exec_sql –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é.")
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã categories: ${categoriesError.message}`)
        }
      }
      setLog((prev) => [...prev, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"])

      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É coloring_pages, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      setLog((prev) => [...prev, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã coloring_pages..."])
      const { error: coloringPagesError } = await supabase.rpc("exec_sql", {
        sql_query: `
          CREATE TABLE IF NOT EXISTS coloring_pages (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            title TEXT NOT NULL,
            description TEXT,
            price DECIMAL(10, 2) NOT NULL DEFAULT 0,
            image_url TEXT,
            thumbnail_url TEXT,
            category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
            slug TEXT UNIQUE NOT NULL,
            difficulty_level TEXT DEFAULT 'medium',
            age_group TEXT DEFAULT 'all',
            is_featured BOOLEAN DEFAULT false,
            download_count INTEGER DEFAULT 0,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        `,
      })

      if (coloringPagesError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã coloring_pages: ${coloringPagesError.message}`)
      }
      setLog((prev) => [...prev, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ coloring_pages —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"])

      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin_users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      setLog((prev) => [...prev, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã admin_users..."])
      const { error: adminUsersError } = await supabase.rpc("exec_sql", {
        sql_query: `
          CREATE TABLE IF NOT EXISTS admin_users (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            email TEXT UNIQUE NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        `,
      })

      if (adminUsersError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã admin_users: ${adminUsersError.message}`)
      }
      setLog((prev) => [...prev, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_users —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"])

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      setLog((prev) => [...prev, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."])
      const { error: adminError } = await supabase.rpc("exec_sql", {
        sql_query: `
          INSERT INTO admin_users (email)
          VALUES ('admin@example.com')
          ON CONFLICT (email) DO NOTHING;
        `,
      })

      if (adminError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminError.message}`)
      }
      setLog((prev) => [...prev, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"])

      setSuccess(true)
      setLog((prev) => [...prev, "üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!"])
    } catch (err: any) {
      console.error("Error creating tables:", err)
      setError(err.message)
      setLog((prev) => [...prev, `‚ùå –û—à–∏–±–∫–∞: ${err.message}`])
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü</h1>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
          </p>

          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {success && (
            <Alert className="mb-4 bg-green-50 text-green-800 border-green-200">
              <AlertDescription>–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!</AlertDescription>
            </Alert>
          )}

          <Button onClick={createTables} disabled={loading}>
            {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü..." : "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã"}
          </Button>
        </CardContent>
      </Card>

      {log.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-100 p-4 rounded-md font-mono text-sm max-h-80 overflow-y-auto">
              {log.map((line, index) => (
                <div key={index} className="mb-1">
                  {line}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      <div className="mt-6 flex gap-4">
        <Link href="/admin">
          <Button variant="outline">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</Button>
        </Link>
        {success && (
          <Link href="/admin/coloring-pages">
            <Button>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–∞—Å–∫—Ä–∞—Å–∫–∏</Button>
          </Link>
        )}
      </div>
    </div>
  )
}
